/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.kafka.schema;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

/** Schema for representing user information */
@org.apache.avro.specific.AvroGenerated
public class userInfo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7868925511548000327L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"userInfo\",\"namespace\":\"com.example.kafka.schema\",\"doc\":\"Schema for representing user information\",\"fields\":[{\"name\":\"name\",\"type\":\"string\",\"default\":\"John Doe\"},{\"name\":\"age\",\"type\":\"int\",\"default\":26},{\"name\":\"email\",\"type\":\"string\",\"default\":\"johndoe@gmail.com\"},{\"name\":\"nationality\",\"type\":\"string\",\"default\":\"American\"},{\"name\":\"mobile\",\"type\":\"string\",\"default\":\"0000000\"},{\"name\":\"gender\",\"type\":\"string\",\"default\":\"Male\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<userInfo> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<userInfo> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<userInfo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<userInfo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<userInfo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this userInfo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a userInfo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a userInfo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static userInfo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence name;
  private int age;
  private java.lang.CharSequence email;
  private java.lang.CharSequence nationality;
  private java.lang.CharSequence mobile;
  private java.lang.CharSequence gender;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public userInfo() {}

  /**
   * All-args constructor.
   * @param name The new value for name
   * @param age The new value for age
   * @param email The new value for email
   * @param nationality The new value for nationality
   * @param mobile The new value for mobile
   * @param gender The new value for gender
   */
  public userInfo(java.lang.CharSequence name, java.lang.Integer age, java.lang.CharSequence email, java.lang.CharSequence nationality, java.lang.CharSequence mobile, java.lang.CharSequence gender) {
    this.name = name;
    this.age = age;
    this.email = email;
    this.nationality = nationality;
    this.mobile = mobile;
    this.gender = gender;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return name;
    case 1: return age;
    case 2: return email;
    case 3: return nationality;
    case 4: return mobile;
    case 5: return gender;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: name = (java.lang.CharSequence)value$; break;
    case 1: age = (java.lang.Integer)value$; break;
    case 2: email = (java.lang.CharSequence)value$; break;
    case 3: nationality = (java.lang.CharSequence)value$; break;
    case 4: mobile = (java.lang.CharSequence)value$; break;
    case 5: gender = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'name' field.
   * @return The value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }


  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'age' field.
   * @return The value of the 'age' field.
   */
  public int getAge() {
    return age;
  }


  /**
   * Sets the value of the 'age' field.
   * @param value the value to set.
   */
  public void setAge(int value) {
    this.age = value;
  }

  /**
   * Gets the value of the 'email' field.
   * @return The value of the 'email' field.
   */
  public java.lang.CharSequence getEmail() {
    return email;
  }


  /**
   * Sets the value of the 'email' field.
   * @param value the value to set.
   */
  public void setEmail(java.lang.CharSequence value) {
    this.email = value;
  }

  /**
   * Gets the value of the 'nationality' field.
   * @return The value of the 'nationality' field.
   */
  public java.lang.CharSequence getNationality() {
    return nationality;
  }


  /**
   * Sets the value of the 'nationality' field.
   * @param value the value to set.
   */
  public void setNationality(java.lang.CharSequence value) {
    this.nationality = value;
  }

  /**
   * Gets the value of the 'mobile' field.
   * @return The value of the 'mobile' field.
   */
  public java.lang.CharSequence getMobile() {
    return mobile;
  }


  /**
   * Sets the value of the 'mobile' field.
   * @param value the value to set.
   */
  public void setMobile(java.lang.CharSequence value) {
    this.mobile = value;
  }

  /**
   * Gets the value of the 'gender' field.
   * @return The value of the 'gender' field.
   */
  public java.lang.CharSequence getGender() {
    return gender;
  }


  /**
   * Sets the value of the 'gender' field.
   * @param value the value to set.
   */
  public void setGender(java.lang.CharSequence value) {
    this.gender = value;
  }

  /**
   * Creates a new userInfo RecordBuilder.
   * @return A new userInfo RecordBuilder
   */
  public static com.example.kafka.schema.userInfo.Builder newBuilder() {
    return new com.example.kafka.schema.userInfo.Builder();
  }

  /**
   * Creates a new userInfo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new userInfo RecordBuilder
   */
  public static com.example.kafka.schema.userInfo.Builder newBuilder(com.example.kafka.schema.userInfo.Builder other) {
    if (other == null) {
      return new com.example.kafka.schema.userInfo.Builder();
    } else {
      return new com.example.kafka.schema.userInfo.Builder(other);
    }
  }

  /**
   * Creates a new userInfo RecordBuilder by copying an existing userInfo instance.
   * @param other The existing instance to copy.
   * @return A new userInfo RecordBuilder
   */
  public static com.example.kafka.schema.userInfo.Builder newBuilder(com.example.kafka.schema.userInfo other) {
    if (other == null) {
      return new com.example.kafka.schema.userInfo.Builder();
    } else {
      return new com.example.kafka.schema.userInfo.Builder(other);
    }
  }

  /**
   * RecordBuilder for userInfo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<userInfo>
    implements org.apache.avro.data.RecordBuilder<userInfo> {

    private java.lang.CharSequence name;
    private int age;
    private java.lang.CharSequence email;
    private java.lang.CharSequence nationality;
    private java.lang.CharSequence mobile;
    private java.lang.CharSequence gender;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.kafka.schema.userInfo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.nationality)) {
        this.nationality = data().deepCopy(fields()[3].schema(), other.nationality);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.mobile)) {
        this.mobile = data().deepCopy(fields()[4].schema(), other.mobile);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.gender)) {
        this.gender = data().deepCopy(fields()[5].schema(), other.gender);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
    }

    /**
     * Creates a Builder by copying an existing userInfo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.kafka.schema.userInfo other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.name)) {
        this.name = data().deepCopy(fields()[0].schema(), other.name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.age)) {
        this.age = data().deepCopy(fields()[1].schema(), other.age);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.email)) {
        this.email = data().deepCopy(fields()[2].schema(), other.email);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.nationality)) {
        this.nationality = data().deepCopy(fields()[3].schema(), other.nationality);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.mobile)) {
        this.mobile = data().deepCopy(fields()[4].schema(), other.mobile);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.gender)) {
        this.gender = data().deepCopy(fields()[5].schema(), other.gender);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'name' field.
      * @return The value.
      */
    public java.lang.CharSequence getName() {
      return name;
    }


    /**
      * Sets the value of the 'name' field.
      * @param value The value of 'name'.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder setName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'name' field has been set.
      * @return True if the 'name' field has been set, false otherwise.
      */
    public boolean hasName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'name' field.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder clearName() {
      name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'age' field.
      * @return The value.
      */
    public int getAge() {
      return age;
    }


    /**
      * Sets the value of the 'age' field.
      * @param value The value of 'age'.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder setAge(int value) {
      validate(fields()[1], value);
      this.age = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'age' field has been set.
      * @return True if the 'age' field has been set, false otherwise.
      */
    public boolean hasAge() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'age' field.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder clearAge() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'email' field.
      * @return The value.
      */
    public java.lang.CharSequence getEmail() {
      return email;
    }


    /**
      * Sets the value of the 'email' field.
      * @param value The value of 'email'.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder setEmail(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.email = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'email' field has been set.
      * @return True if the 'email' field has been set, false otherwise.
      */
    public boolean hasEmail() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'email' field.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder clearEmail() {
      email = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'nationality' field.
      * @return The value.
      */
    public java.lang.CharSequence getNationality() {
      return nationality;
    }


    /**
      * Sets the value of the 'nationality' field.
      * @param value The value of 'nationality'.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder setNationality(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.nationality = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'nationality' field has been set.
      * @return True if the 'nationality' field has been set, false otherwise.
      */
    public boolean hasNationality() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'nationality' field.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder clearNationality() {
      nationality = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'mobile' field.
      * @return The value.
      */
    public java.lang.CharSequence getMobile() {
      return mobile;
    }


    /**
      * Sets the value of the 'mobile' field.
      * @param value The value of 'mobile'.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder setMobile(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.mobile = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'mobile' field has been set.
      * @return True if the 'mobile' field has been set, false otherwise.
      */
    public boolean hasMobile() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'mobile' field.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder clearMobile() {
      mobile = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'gender' field.
      * @return The value.
      */
    public java.lang.CharSequence getGender() {
      return gender;
    }


    /**
      * Sets the value of the 'gender' field.
      * @param value The value of 'gender'.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder setGender(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.gender = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'gender' field has been set.
      * @return True if the 'gender' field has been set, false otherwise.
      */
    public boolean hasGender() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'gender' field.
      * @return This builder.
      */
    public com.example.kafka.schema.userInfo.Builder clearGender() {
      gender = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public userInfo build() {
      try {
        userInfo record = new userInfo();
        record.name = fieldSetFlags()[0] ? this.name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.age = fieldSetFlags()[1] ? this.age : (java.lang.Integer) defaultValue(fields()[1]);
        record.email = fieldSetFlags()[2] ? this.email : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.nationality = fieldSetFlags()[3] ? this.nationality : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.mobile = fieldSetFlags()[4] ? this.mobile : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.gender = fieldSetFlags()[5] ? this.gender : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<userInfo>
    WRITER$ = (org.apache.avro.io.DatumWriter<userInfo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<userInfo>
    READER$ = (org.apache.avro.io.DatumReader<userInfo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.name);

    out.writeInt(this.age);

    out.writeString(this.email);

    out.writeString(this.nationality);

    out.writeString(this.mobile);

    out.writeString(this.gender);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);

      this.age = in.readInt();

      this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);

      this.nationality = in.readString(this.nationality instanceof Utf8 ? (Utf8)this.nationality : null);

      this.mobile = in.readString(this.mobile instanceof Utf8 ? (Utf8)this.mobile : null);

      this.gender = in.readString(this.gender instanceof Utf8 ? (Utf8)this.gender : null);

    } else {
      for (int i = 0; i < 6; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.name = in.readString(this.name instanceof Utf8 ? (Utf8)this.name : null);
          break;

        case 1:
          this.age = in.readInt();
          break;

        case 2:
          this.email = in.readString(this.email instanceof Utf8 ? (Utf8)this.email : null);
          break;

        case 3:
          this.nationality = in.readString(this.nationality instanceof Utf8 ? (Utf8)this.nationality : null);
          break;

        case 4:
          this.mobile = in.readString(this.mobile instanceof Utf8 ? (Utf8)this.mobile : null);
          break;

        case 5:
          this.gender = in.readString(this.gender instanceof Utf8 ? (Utf8)this.gender : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










